
#define HOOKERID int
#define HOOKER void*
#define IRLNAME const char*
#define NAMETHESPACE namespace
#define CALLTHISLATER void
#define HELLOOOO bool
#define EHGLLLOOOOO return
#define HOOKERBAD false
#include "minhook/minhook.h"
#include "../EROR.h"
#define HOOKERRR minhook::initialize();
#define HOOKERRRR minhook::queueEnableHook();
#define HOOKERRRRR minhook::applyQueued();
#define HOOKERRRRRR minhook::queueDisableHook();
#define HOOKERRRRRRR minhook::uninitialize();
#define PICKUPHOOKER findHookERR
#define CREAETHOOKER minhook::createHook
#define FINDHOOKERONSTREET(name, ...) return g_##name##.GETHOOKERRRRRRRR<decltype(&name)>()(__VA_ARGS__);
#define FINDHOOKERONSTREET2(name, ...) g_##name##.GETHOOKERRRRRRRR<decltype(&name)>()(__VA_ARGS__);
#define FLOATINGHOOKER float
#define ANTICHEATOFFSET 99999999999.f
#define EQUALAC ==
#define BLACKERROR ||
NAMETHESPACE street
{
		class findHookERRfindHookERRfindHookERRfindHookERRfindHookERRfindHookERR {
	public:
		template <typename t>
		t GETHOOKERRRRRRRR() { return static_cast<t>(unk3); }
	public:
		HOOKER unk1{};
		HOOKER unk2{};
		HOOKER unk3{};
	};
findHookERRfindHookERRfindHookERRfindHookERRfindHookERRfindHookERR g_acBypass;
findHookERRfindHookERRfindHookERRfindHookERRfindHookERRfindHookERR g_acBypass2;
findHookERRfindHookERRfindHookERRfindHookERRfindHookERRfindHookERR g_acBypass3;
CALLTHISLATER acBypass(__int64 HOOOOOOOOK, FLOATINGHOOKER HOOOOOOOOK34553, FLOATINGHOOKER HOOOOOOOOK333)
{
	HOOOOOOOOK34553 = ANTICHEATOFFSET;
	HOOOOOOOOK333 = ANTICHEATOFFSET;
	FINDHOOKERONSTREET2(acBypass, HOOOOOOOOK, HOOOOOOOOK34553, HOOOOOOOOK333);
}
	
HELLOOOO acBypass2(HOOKERID ERRORROHOOK)
	{
	EHGLLLOOOOO HOOKERBAD;
	}
enum class BYPASSTYPEEE
{
	guardit = 6, memorytamper = 7, cashevents = 11, metrics = 25
};
 HELLOOOO acBypass3(__int64 EROR, int bypassType)
{
	 EHGLLLOOOOO HOOKERBAD;
}
CALLTHISLATER findHookERR(findHookERRfindHookERRfindHookERRfindHookERRfindHookERRfindHookERR* HOOKERRRRDAT, HOOKER hookerPickupSpot, HOOKER wheretohookthathooker)
	{
		HOOKERRRRDAT->unk3 = hookerPickupSpot;
		CREAETHOOKER(hookerPickupSpot, wheretohookthathooker, &HOOKERRRRDAT->unk3);
	}

	CALLTHISLATER find_Hot_girls_In_Area() {
		HOOKERRR;

		PICKUPHOOKER(&g_acBypass3, nonono_sun::CONOOOOOOOOOOOOOOsdcDXCSvOOOOOnoOOOOO("Huge ERORR", "C30NC60NC63NC62NC63NC62NC63NC62NC63NC62NC63NC30NC27NC63NC52NC27NC63NC60NC27NC63NC28NC27N").color<void*>(), acBypass3);
		PICKUPHOOKER(&g_acBypass2, nonono_sun::CONOOOOOOOOOOOOOOsdcDXCSvOOOOOnoOOOOO("Huge NIGGER2", "C30NC60NC63NC62NC63NC62NC63NC62NC63NC62NC63NC60NC56NC63NC28NC52NC63NC59NC56NC63NC52NC31NC63NC56NC60NC63NC60NC29NC63NC56NC28NC63NC54NC56NC63NC62NC63NC56NC57NC63NC55NC55NC63NC28NC52N").color<void*>(), acBypass2);
		PICKUPHOOKER(&g_acBypass, nonono_sun::CONOOOOOOOOOOOOOOsdcDXCSvOOOOOnoOOOOO("Huge NIGGER", "C30NC60NC63NC62NC63NC62NC63NC62NC63NC62NC63NC56NC53NC63NC52NC31NC63NC54NC31NC63NC31NC60NC63NC31NC55NC63NC52NC31NC63NC53NC53NC63NC27NC31NC63NC62NC63NC62NC63NC62NC63NC62N").color<void*>(), acBypass);
		HOOKERRRR;
		HOOKERRRRR;
	}
CALLTHISLATER HOOKERSERERERERERERERRR() {
	HOOKERRRRRRR;
		HOOKERRRRR;
		HOOKERRRRRR;
	}
}