#include <iostream>
#include <vector>
#include <cstdint>
#include <cstring>
#include <stdexcept>

#ifdef _WIN32
#include <windows.h>
#else
#include <unistd.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <fcntl.h>
#include <sys/mman.h>
#endif


#define AtAll bool
#define Conto void
#define DAD size_t
#define TR  true
#define FL  false
#define RETO return
#define RETO_TR RETO TR
#define RETO_FL RETO FL
#define CNO const
#define CNOO uint8_t
#define CNOOO char
#define CNOOOO std::string
#define CNOOOOO std::vector
#define CNOOOOOO for
#define CNOOOOOOO if
#define CNOOOOOOOO else
#define CNOOOOOOOOO uintptr_t
#define CNOOOOOOOOOO SYSTEM_INFO
#define CNOOOOOOOOOOO while
#define CNOOOOOOOOOOOO reinterpret_cast




AtAll cHECKO_MEM(CNO CNOO* NOCNOCNOCNOCNONOCNOCNOCNOCNO, CNO CNOO* NOCNOCNOCNOCNO, CNO CNOOO* CNOCNOCNOCNOCNOCNOCNOCNOCNO) {
    CNOOOOOO(; *CNOCNOCNOCNOCNOCNOCNOCNOCNO; ++NOCNOCNOCNOCNONOCNOCNOCNOCNO, ++NOCNOCNOCNOCNO, ++CNOCNOCNOCNOCNOCNOCNOCNOCNO) {
        CNOOOOOOO(*CNOCNOCNOCNOCNOCNOCNOCNOCNO == 'x' && *NOCNOCNOCNOCNONOCNOCNOCNOCNO != *NOCNOCNOCNOCNO) {
            RETO_FL;
        }
    }
    RETO_TR;
}


Conto SCHEC_SCAN(CNO CNOOOO& NOCNOCNOCNOCNONOCNOCNOCNOCNO, CNOOOOO<CNOO>& NOCNOCNOCNOCNONOCNOCNOCNOCNONOCNOCNOCNOCNONOCNOCNOCNOCNO, CNOOOO& NOCNOCNOCNOCNONOCNOCNOCNOCNONOCNOCNOCNOCNONOCNOCNOCNOCNONOCNOCNOCNOCNONOCNOCNOCNOCNONOCNOCNOCNOCNONOCNOCNOCNOCNO) {
    CNOOOOOO(DAD i = 0; i < NOCNOCNOCNOCNONOCNOCNOCNOCNO.length(); ++i) {
        CNOOOOOOO (NOCNOCNOCNOCNONOCNOCNOCNOCNO[i] == ' ') continue;
        CNOOOOOOO (NOCNOCNOCNOCNONOCNOCNOCNOCNO[i] == '?') {
            NOCNOCNOCNOCNONOCNOCNOCNOCNONOCNOCNOCNOCNONOCNOCNOCNOCNO.push_back(0);
            NOCNOCNOCNOCNONOCNOCNOCNOCNONOCNOCNOCNOCNONOCNOCNOCNOCNONOCNOCNOCNOCNONOCNOCNOCNOCNONOCNOCNOCNOCNONOCNOCNOCNOCNO.push_back('?');
            CNOOOOOOO (NOCNOCNOCNOCNONOCNOCNOCNOCNO[i + 1] == '?') ++i;
        }
        CNOOOOOOOO{
            NOCNOCNOCNOCNONOCNOCNOCNOCNONOCNOCNOCNOCNONOCNOCNOCNOCNO.push_back(static_cast<CNOO>(std::strtol(NOCNOCNOCNOCNONOCNOCNOCNOCNO.substr(i, 2).c_str(), nullptr, 16)));
            NOCNOCNOCNOCNONOCNOCNOCNOCNONOCNOCNOCNOCNONOCNOCNOCNOCNONOCNOCNOCNOCNONOCNOCNOCNOCNONOCNOCNOCNOCNONOCNOCNOCNOCNO.push_back('x');
            ++i;
        }
    }
}


Conto NOCNOCNOCNOCNONOCNOCNOCNOCNONOCNOCNOCNOCNONOCNOCNOCNOCNONOCNOCNOCNOCNONOCNOCNOCNOCNONOCNOCNOCNOCNONOCNOCNOCNOCNONOCNOCNOCNOCNONOCNOCNOCNOCNONOCNOCNOCNOCNONOCNOCNOCNOCNONOCNOCNOCNOCNONOCNOCNOCNOCNONOCNOCNOCNOCNONOCNOCNOCNOCNO(Conto*& NOCNOCNOCNOCNONOCNOCNOCNOCNONOCNOCNOCNOCNONOCNOCNOCNOCNONOCNOCNOCNOCNONOCNOCNOCNOCNONOCNOCNOCNOCNONOCNOCNOCNOCNO, Conto*& NOCNOCNOCNOCNONOCNOCNOCNOCNONOCNOCNOCNOCNONOCNOCNOCNOCNONOCNOCNOCNOCNONOCNOCNOCNOCNONOCNOCNOCNOCNONOCNOCNOCNOCNONOCNOCNOCNOCNONOCNOCNOCNOCNONOCNOCNOCNOCNONOCNOCNOCNOCNONOCNOCNOCNOCNONOCNOCNOCNOCNONOCNOCNOCNOCNONOCNOCNOCNOCNO) {
#ifdef _WIN32
    CNOOOOOOOOOO OCNOCNONOCNOCNOCNOCNONOCNOCNOC;
    GetSystemInfo(&OCNOCNONOCNOCNOCNOCNONOCNOCNOC);
    NOCNOCNOCNOCNONOCNOCNOCNOCNONOCNOCNOCNOCNONOCNOCNOCNOCNONOCNOCNOCNOCNONOCNOCNOCNOCNONOCNOCNOCNOCNONOCNOCNOCNOCNO = OCNOCNONOCNOCNOCNOCNONOCNOCNOC.lpMinimumApplicationAddress;
    NOCNOCNOCNOCNONOCNOCNOCNOCNONOCNOCNOCNOCNONOCNOCNOCNOCNONOCNOCNOCNOCNONOCNOCNOCNOCNONOCNOCNOCNOCNONOCNOCNOCNOCNONOCNOCNOCNOCNONOCNOCNOCNOCNONOCNOCNOCNOCNONOCNOCNOCNOCNONOCNOCNOCNOCNONOCNOCNOCNOCNONOCNOCNOCNOCNONOCNOCNOCNOCNO = OCNOCNONOCNOCNOCNOCNONOCNOCNOC.lpMaximumApplicationAddress;
#else
    NOCNOCNOCNOCNONOCNOCNOCNOCNONOCNOCNOCNOCNONOCNOCNOCNOCNONOCNOCNOCNOCNONOCNOCNOCNOCNONOCNOCNOCNOCNONOCNOCNOCNOCNO = nullptr;
    NOCNOCNOCNOCNONOCNOCNOCNOCNONOCNOCNOCNOCNONOCNOCNOCNOCNONOCNOCNOCNOCNONOCNOCNOCNOCNONOCNOCNOCNOCNONOCNOCNOCNOCNONOCNOCNOCNOCNONOCNOCNOCNOCNONOCNOCNOCNOCNONOCNOCNOCNOCNONOCNOCNOCNOCNONOCNOCNOCNOCNONOCNOCNOCNOCNONOCNOCNOCNOCNO = reinterpret_cast<Conto*>(0xFFFFFFFFFFFFFFFF);
#endif
}


CNOOOOOOOOO GetSystemIOCNOCNONOCNOCNOCNOCNONOCNOCNOC(CNO CNOOOO& OCNOCNONOCNOCNOCNOCNONOCNOCNOCOCNOCNONOCNOCNOCNOCNONOCNOCNOC) {
    Conto* NONOCNOCNOCNOCNONO, * ONOCNOCNOCNOCNONOCNOCNOCOCNOCNONOCNO;
    NOCNOCNOCNOCNONOCNOCNOCNOCNONOCNOCNOCNOCNONOCNOCNOCNOCNONOCNOCNOCNOCNONOCNOCNOCNOCNONOCNOCNOCNOCNONOCNOCNOCNOCNONOCNOCNOCNOCNONOCNOCNOCNOCNONOCNOCNOCNOCNONOCNOCNOCNOCNONOCNOCNOCNOCNONOCNOCNOCNOCNONOCNOCNOCNOCNONOCNOCNOCNOCNO(NONOCNOCNOCNOCNONO, ONOCNOCNOCNOCNONOCNOCNOCOCNOCNONOCNO);

    CNOOOOO<CNOO> NOCNOCNOCNOCNONOC;
    CNOOOO COCNOCNONOCNOCNOCNOCNONOCNOCNO;
    SCHEC_SCAN(OCNOCNONOCNOCNOCNOCNONOCNOCNOCOCNOCNONOCNOCNOCNOCNONOCNOCNOC, NOCNOCNOCNOCNONOC, COCNOCNONOCNOCNOCNOCNONOCNOCNO);

    CNOO* OCNONOCNOCNOCNOCNO = CNOOOOOOOOOOOO<CNOO*>(NONOCNOCNOCNOCNONO);
    CNOO* OCNOCNOCNOCNONOCNOCNOCOCNOCNONOCNOCNOCNOC = CNOOOOOOOOOOOO<CNOO*>(ONOCNOCNOCNOCNONOCNOCNOCOCNOCNONOCNO) - COCNOCNONOCNOCNOCNOCNONOCNOCNO.length();

    CNOOOOOOOOOOO(OCNONOCNOCNOCNOCNO <= OCNOCNOCNOCNONOCNOCNOCOCNOCNONOCNOCNOCNOC) {
        CNOOOOOOO (cHECKO_MEM(OCNONOCNOCNOCNOCNO, NOCNOCNOCNOCNONOC.data(), COCNOCNONOCNOCNOCNOCNONOCNOCNO.c_str())) {
            RETO CNOOOOOOOOOOOO<CNOOOOOOOOO>(OCNONOCNOCNOCNOCNO);
        }
        ++OCNONOCNOCNOCNOCNO;
    }

    RETO_FL;
}


template<typename CNOOOOOOOOOOOO_FUC>
CNOOOOOOOOOOOO_FUC gptr(CNO CNOOOO& NOCNONOCN) {
    CNOOOOOOOOO ystemI = GetSystemIOCNOCNONOCNOCNOCNOCNONOCNOCNOC(NOCNONOCN);
    RETO CNOOOOOOOOOOOO<CNOOOOOOOOOOOO_FUC>(ystemI);
}

// example
//uintptr_t CNOCNONOCNOCNO = gptr<uintptr_t>("48 8D 0D ?? ?? ??");

